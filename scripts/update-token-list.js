const fs = require('fs');
const path = require('path');

async function updateTokenList() {
  try {
    console.log('üîÑ Fetching latest token list from Panora API...');
    
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à API endpoint
    const response = await fetch('http://localhost:3000/api/panora/tokenList?chainId=1');
    
    if (!response.ok) {
      throw new Error(`API returned status ${response.status}`);
    }
    
    const data = await response.json();
    
    console.log(`‚úÖ Received ${data.data.data.length} tokens from API`);
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É tokenList.json
    const filePath = path.join(__dirname, '..', 'src', 'lib', 'data', 'tokenList.json');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const tokenListData = {
      data: {
        status: data.data.status,
        data: data.data.data
      }
    };
    fs.writeFileSync(filePath, JSON.stringify(tokenListData, null, 2));
    
    console.log(`‚úÖ Token list updated successfully!`);
    console.log(`üìÅ File saved to: ${filePath}`);
    console.log(`üìä Total tokens: ${data.data.data.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\nüìã Sample tokens:');
    data.data.data.slice(0, 5).forEach(token => {
      console.log(`  - ${token.symbol} (${token.name})`);
    });
    
  } catch (error) {
    console.error('‚ùå Error updating token list:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateTokenList(); 